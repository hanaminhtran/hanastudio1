{"version":3,"sources":["ShowResult.tsx","PersonProps.tsx","apis/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PaitentVaccined","fullname","birthday","phone","identification","address","healthInsuranceNumber","vaccineName","vaccineDay","vaccinePlace","qrCode","styles","container","width","height","margin","backgroundColor","display","flexDirection","justifyContent","alignItems","fontWeight","containerResult","toTimestamp","strDate","Date","parse","Person","useState","patient","setPatient","showing","setResult","noData","setNodata","message","setMessage","showInputPage","setShowInput","dateBirth","onChange","_fullname","_birthDay","_phone","values","setValues","handleChange","e","target","name","value","style","type","format","onClick","preventDefault","promis","axios","get","SendOTP","toString","then","response","otp","prompt","GetDataOTP","patientData","dateInject","data","patientInfo","vaccinatedInfoes","injectionDate","getDate","getMonth","getFullYear","personalPhoneNumber","ward","district","province","injectionPlace","console","log","reason","error","color","App","className","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41b66006.chunk.js","sourcesContent":["\n\nimport axios from 'axios';\nimport { response } from 'express';\nimport { title } from 'process';\nimport React, {useState,useEffect} from 'react';\nimport {SendOTP,GetDataOTP} from './apis/index'\n\n\nexport class C {\n  a: number = 10;\n  b: boolean = true;\n  c: string = \"hello\";\n  }\nexport class  PaitentVaccined{\n\n  fullname : string ='';\n  birthday : string='';\n  phone: string='';\n  identification: string='';\n  address : string='';\n  healthInsuranceNumber: string='';\n  vaccineName: string='';\n  vaccineDay: string;\n  vaccinePlace: string='';\n  qrCode: string='';\n}\nfunction toTimestamp(strDate){\n  var datum = Date.parse(strDate);\n  return datum/1000;\n}\n\nexport function ShowResult (patient)\n {\n\n  const [curPatient, setPatient] = useState(new PaitentVaccined());\n  const [fullname, setFullName] = useState();\n  useEffect(()=>{\n    setPatient(patient);\n    setFullName(patient.fullname);\n    //console.log('data to ShowResult')\n    console.log(fullname)\n  },[patient])\n\n  return (\n    <div>\n      <p>Name :{fullname} </p>\n      <p>birthday :{curPatient.birthday} </p>\n      <p>identification : {curPatient.identification} </p>\n      <p>phone : {curPatient.phone} </p>\n      <p>injection day : {curPatient.vaccineDay}</p>\n      <p>injection place : {curPatient.vaccinePlace}</p>\n      <p>vaccine name : {curPatient.vaccineName}</p>\n      <p>vaccine qrCode : {curPatient.qrCode}</p>\n    </div>\n    \n  )\n}\n\n","\n\nimport axios from 'axios';\nimport { response } from 'express';\nimport { title } from 'process';\nimport React, {useState,useEffect} from 'react';\nimport {SendOTP,GetDataOTP} from './apis/index'\nimport { ShowResult,PaitentVaccined } from './ShowResult';\nimport DateTimePicker from 'react-datetime-picker';\n\nconst styles: { [key: string]: React.CSSProperties } = {\n  container: {\n    width: 600,\n    height: 600,\n    margin: \"50px auto\",\n    backgroundColor: \"orange\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontWeight: \"bold\",\n  },\n  containerResult: {\n    width: 600,\n    height: 600,\n    margin: \"50px auto\",\n    backgroundColor: \"green\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontWeight: \"bold\",\n  },\n};\n\nexport interface PersonProps{\n\n  fullname : string;\n  birthday : Date;\n  phone: string;\n}\nfunction toTimestamp(strDate){\n  var datum = Date.parse(strDate);\n  return datum/1000;\n}\n\nexport function Person ({fullname, birthday,phone})\n {\n\n  const [patient, setPatient] = useState( new PaitentVaccined());\n  const [showing, setResult] = useState( false);\n  const [noData, setNodata] = useState( false);\n  const [message, setMessage] = useState( \"You have no information in the vaccination database!\");\n  const [showInputPage, setShowInput] = useState( true);\n  const [dateBirth, onChange] = useState(new Date());\n\n  const initialValues = {\n    _fullname: \"\",\n    _birthDay: \"\",\n    _phone: \"\",\n  };\n  const [values, setValues] = useState(initialValues);\n  const handleChange = (e)=> {\n\n    const { name, value } = e.target;\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  }\n  const handleOnBack = (e) =>{\n    setShowInput(true);\n    setNodata(false);\n\n    setResult(false);\n\n  }\n\n  const handleOnSubmit = (e) =>{\n    setNodata(false);\n      setResult(false);\n    e.preventDefault();\n    var promis =  SendOTP(values._fullname, toTimestamp(dateBirth.toString()),values._phone)\n    promis.then( (response) =>{  \n      \n      var otp = prompt(\"Please enter OTP send to your phone\", \"\");\n      if (otp != null) {\n        GetDataOTP(values._fullname, toTimestamp(dateBirth.toString()),values._phone,otp)\n        .then((response) =>{ \n          var patientData = new PaitentVaccined();\n          var dateInject = new Date(response.data.patientInfo.vaccinatedInfoes[0].injectionDate);\n          var dateBirth = new Date(response.data.patientInfo.birthday);\n          patientData.fullname = response.data.patientInfo.fullname;\n          patientData.birthday = dateBirth.getDate()+\"/\"+(dateBirth.getMonth()+1)+ \"/\"+dateBirth.getFullYear();\n          patientData.phone = response.data.patientInfo.personalPhoneNumber;\n          patientData.identification = response.data.patientInfo.identification;\n          patientData.address = `${response.data.patientInfo.ward}, ${response.data.patientInfo.district},${response.data.patientInfo.province}`;\n          patientData.healthInsuranceNumber = response.data.patientInfo.healthInsuranceNumber;\n          patientData.vaccineDay = dateInject.getDate()+\"/\"+(dateInject.getMonth()+1)+ \"/\"+dateInject.getFullYear();\n          patientData.vaccineName = response.data.patientInfo.vaccinatedInfoes[0].vaccineName;\n          patientData.vaccinePlace = response.data.patientInfo.vaccinatedInfoes[0].injectionPlace;\n          patientData.qrCode = response.data.patientInfo.vaccinatedInfoes[0].qrCode;\n          setShowInput(false);\n          setNodata(false);\n          setPatient(patientData);\n          setResult(true);\n          console.log(response)   \n        },reason => {\n          setNodata(true);\n          setResult(false);\n          setMessage(\"Invalid OTP code!\")\n          console.error(reason)})\n      } \n     }, reason => {\n      setNodata(true);\n      setResult(false);\n      setMessage(\"You have no information in the vaccination database!\")\n      console.error(reason); // Error!\n    });\n    \n    \n  }\n  \n  /* <button onClick={() => this.setState({ showing: !showing })}>toggle</button>\n  <div style={{ display: (showing ? 'block' : 'none') }}>This is visible</div> */\n\n  return (\n        \n    <div style={{\n\n      justifyContent: \"left\",\n      alignItems: \"left\"\n    }}>\n        \n        { showInputPage ? \n      <div style={styles.container}>\n        <h2> Input info to check your vaccination: </h2>\n          <form>\n         \n              <p>\n                <label> Name:  <input  name=\"_fullname\" type=\"text\" value={values._fullname} onChange={handleChange} /> </label>\n              </p>\n              <p>\n              <label>  Birthday:  <DateTimePicker format=\"dd-MM-y\" onChange={onChange} value={dateBirth} /></label>\n              </p>\n              <p>\n                <label> Phone:  <input name=\"_phone\"  type=\"text\" value={values._phone} onChange={handleChange}  /> </label>\n              </p>    \n              <p>         \n              <input type=\"submit\" value=\"Check\" onClick= {handleOnSubmit}/>\n              </p>\n            </form>\n     </div> : null\n      }\n      { showing ?\n      <div style={styles.containerResult}>\n          <h1 style={{color: \"green\"}}>You injection information:</h1>\n          <p>Name :<b>{patient.fullname}</b> </p>\n          <p>Birthday :<b>{patient.birthday} </b></p>\n          <p>Id card :<b> {patient.identification}</b> </p>\n          <p>Phone : <b>{patient.phone}</b> </p>\n          <p>Injection day :<b> {patient.vaccineDay}</b></p>\n          <p>Injection place :<b> {patient.vaccinePlace}</b></p>\n          <p>Vaccine name : <b>{patient.vaccineName}</b></p>\n          <button onClick= {handleOnBack}>Back </button> \n         {/*  <p>vaccine qrCode : {patient.qrCode}</p> */}\n      </div> : null\n      }\n      { noData ?\n      <div>\n          \n          <h1 style={{color: \"red\"}}>{message}</h1>\n          \n      </div> : null\n      }\n    </div>\n\n\n    \n  )\n}\n\n","import axios from 'axios';\n\nconst urlOTP = \"/api/vaccination/public/otp-search?fullname=\";\n    //url = url +name + \"&birthday=\" + date.toString() + '&genderId=1&personalPhoneNumber=0919323236&identification=&healthInsuranceNumber';\n\nconst urlGetData = '/api/vaccination/public/patient-vaccinated?fullname='\nexport const SendOTP  = (fullname, birthday,phone) => axios.get(\n    `${urlOTP}${fullname}&birthday=${birthday}000&genderId=1&personalPhoneNumber=${phone}&identification=&healthInsuranceNumber`);\n\nexport const GetDataOTP  = (fullname, birthday,phone,otp) => axios.get(\n    `${urlGetData}${fullname}&birthday=${birthday}000&genderId=1&personalPhoneNumber=${phone}&identification=&healthInsuranceNumber=&otp=${otp}`);\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CovidVaccine from './CovidVaccine';\nimport { Person } from './PersonProps';\n\nclass  App extends React.Component{\n  render(){\n  return(\n    <div className=\"App\">\n \n      \n      <Person\n      fullname=\"TRAN QUANG MINH\"\n      birthday = { new Date(\"1980-09-08\")}\n      phone = \"0919323236\"\n      />\n    </div>\n  );\n}\n}\n\n\n//alert(\"abc\")\n//starredIntoLocal();\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport express from 'express';\nimport { createProxyMiddleware, Filter, Options, RequestHandler } from 'http-proxy-middleware';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}